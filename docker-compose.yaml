version: "3.8"

x-airflow-common: &airflow-common
  build: airflow/.
  env_file: .env  # Add this line if not present

  environment: &airflow-common-env
    PYTHONPATH: /opt/
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'

  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/products_data.json:/opt/airflow/products_data.json
    - ./app:/opt/app

  user: "${AIRFLOW_UID:-50000}:0"

  depends_on:
    - redis
    - postgres

services:
  postgres:
    image: postgres:15
    container_name: postgres
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_MULTIPLE_DATABASES: "airflow,${POSTGRES_DB}"  # Creates both databases

    volumes:
      - ./postgres/data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 5s
      retries: 5

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_PASSWORD:-airflow}

  fastapi:
    build:
      context: ./app
    container_name: fastapi
    env_file: .env
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    volumes:
      - ./app:/opt/app

  telegram-bot:
    build:
      context: ./bot
    container_name: telegram-bot
    env_file: .env
    volumes:
      - ./bot:/opt/bot
      - ./app:/opt/app
    ports:
      - "8001:8001"
    depends_on:
      - fastapi
    command: /bin/bash -c "/opt/bot/setup_webhook.sh && uvicorn main:app --host 0.0.0.0 --port 8001 --reload"

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "${MINIO_API_PORT}:${MINIO_API_PORT}" # S3 API
      - "${MINIO_CONSOLE_PORT}:${MINIO_CONSOLE_PORT}" # Admin Console
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"  # From .env file
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"  # From .env file
    volumes:
      - "${MINIO_DATA_PATH}:/data" # Persistent data storage
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}"